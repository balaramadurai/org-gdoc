#+TITLE: org-gdoc

A simple workflow to bridge the gap between a single-file Org-mode manuscript and a folder of Google Docs (~.docx~ files), designed for writers who collaborate with editors using different tools.

This tool uses a Python backend with ~pandoc~ to handle document conversion and an Emacs Lisp wrapper for seamless integration into your Org-mode workflow.

** Features

Import: Combine an entire folder of ~.docx~ files into a single, well-structured Org-mode file.

Sync/Export: Push changes from any chapter (Org subtree) back to its corresponding ~.docx~ file.

Full-Buffer Sync: Sync all chapters in your manuscript with one command.

Preserve Formatting: Use a reference ~.docx~ file to maintain consistent styling (fonts, headings, etc.) during export.

Smart Imports: Re-running an import on a folder will only add new documents, preventing duplicates.

** Installation

This package requires Python 3 and ~pandoc~.

Install Pandoc:
Follow the instructions for your operating system at [[https://pandoc.org/installing.html][pandoc.org/installing.html]].

Install Python Dependencies:
The Python script requires the ~python-docx~ and ~pypandoc~ libraries.

#+BEGIN_SRC sh
pip install python-docx pypandoc
#+END_SRC

Install with ~straight.el~ and ~use-package~:
Assuming you have ~straight.el~ set up, you can add the following to your Emacs configuration (~init.el~ or ~ ~/.emacs.d/init.el~):

#+BEGIN_SRC emacs-lisp
(use-package org-gdoc
:straight (org-gdoc :type git :host github :repo "balaramadurai/org-gdoc")
:ensure t
:config
;; Optional: Set the path to your style reference document.
;; Create a .docx file with your preferred styles (e.g., Arial font for
;; Normal text), save it, and point this variable to it.
(setq org-gdoc-reference-docx-path "~/Documents/Templates/manuscript_style.docx"))
#+END_SRC

** Usage

Once installed, the following interactive commands become available:

~M-x org-gdoc-import-from-folder~

Prompts for a directory containing ~.docx~ files.

Prompts for a destination path for the new master ~.org~ file.

Imports all documents, creating a level-1 heading for each.

~M-x org-gdoc-export-subtree~

When inside a specific chapter (subtree) in your org file, this command syncs its content back to the original ~.docx~ file specified in the ~:SOURCE_FILE:~ property.

~M-x org-gdoc-export-buffer~

Iterates through all level-1 headings in your org file and syncs each one to its corresponding ~.docx~ file. This is the perfect command to run after a long writing session.

** Acknowledgements

This project was created by Bala Ramadurai with significant assistance and code generation from Google's Gemini 2.5 Pro.

** License

This project is licensed under the MIT License. See the ~LICENSE~ file for details.
